// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Value string

const (
	ValueYes     Value = "yes"
	ValueNo      Value = "no"
	ValueUnknown Value = "unknown"
)

func (e Value) ToPointer() *Value {
	return &e
}
func (e *Value) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "yes":
		fallthrough
	case "no":
		fallthrough
	case "unknown":
		*e = Value(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Value: %v", v)
	}
}

type AIVisionModerationAnalysisDataResponses struct {
	Prompt *string `json:"prompt,omitempty"`
	Value  *Value  `json:"value,omitempty"`
}

func (o *AIVisionModerationAnalysisDataResponses) GetPrompt() *string {
	if o == nil {
		return nil
	}
	return o.Prompt
}

func (o *AIVisionModerationAnalysisDataResponses) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}

type AIVisionModerationAnalysisData struct {
	Responses    []AIVisionModerationAnalysisDataResponses `json:"responses"`
	ModelVersion *int64                                    `json:"model_version,omitempty"`
}

func (o *AIVisionModerationAnalysisData) GetResponses() []AIVisionModerationAnalysisDataResponses {
	if o == nil {
		return []AIVisionModerationAnalysisDataResponses{}
	}
	return o.Responses
}

func (o *AIVisionModerationAnalysisData) GetModelVersion() *int64 {
	if o == nil {
		return nil
	}
	return o.ModelVersion
}
