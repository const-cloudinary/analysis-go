// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/cloudinary/analysis-go/internal/utils"
)

type AssetID struct {
	// The asset ID to analyze
	AssetID string `json:"asset_id"`
}

func (o *AssetID) GetAssetID() string {
	if o == nil {
		return ""
	}
	return o.AssetID
}

type URI struct {
	// The URI of the asset to analyze
	URI string `json:"uri"`
}

func (o *URI) GetURI() string {
	if o == nil {
		return ""
	}
	return o.URI
}

type SourceType string

const (
	SourceTypeURI     SourceType = "uri"
	SourceTypeAssetID SourceType = "asset_id"
)

type Source struct {
	URI     *URI
	AssetID *AssetID

	Type SourceType
}

func CreateSourceURI(uri URI) Source {
	typ := SourceTypeURI

	return Source{
		URI:  &uri,
		Type: typ,
	}
}

func CreateSourceAssetID(assetID AssetID) Source {
	typ := SourceTypeAssetID

	return Source{
		AssetID: &assetID,
		Type:    typ,
	}
}

func (u *Source) UnmarshalJSON(data []byte) error {

	var uri URI = URI{}
	if err := utils.UnmarshalJSON(data, &uri, "", true, true); err == nil {
		u.URI = &uri
		u.Type = SourceTypeURI
		return nil
	}

	var assetID AssetID = AssetID{}
	if err := utils.UnmarshalJSON(data, &assetID, "", true, true); err == nil {
		u.AssetID = &assetID
		u.Type = SourceTypeAssetID
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Source", string(data))
}

func (u Source) MarshalJSON() ([]byte, error) {
	if u.URI != nil {
		return utils.MarshalJSON(u.URI, "", true)
	}

	if u.AssetID != nil {
		return utils.MarshalJSON(u.AssetID, "", true)
	}

	return nil, errors.New("could not marshal union type Source: all fields are null")
}
