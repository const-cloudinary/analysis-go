// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"fmt"
)

type Category string

const (
	CategoryUserError      Category = "user_error"
	CategoryAuthError      Category = "auth_error"
	CategoryServerError    Category = "server_error"
	CategoryRateLimitError Category = "rate_limit_error"
)

func (e Category) ToPointer() *Category {
	return &e
}
func (e *Category) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user_error":
		fallthrough
	case "auth_error":
		fallthrough
	case "server_error":
		fallthrough
	case "rate_limit_error":
		*e = Category(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Category: %v", v)
	}
}

type Details struct {
}

type Error struct {
	Category  *Category `json:"category,omitempty"`
	Code      *string   `json:"code,omitempty"`
	Message   *string   `json:"message,omitempty"`
	Details   *Details  `json:"details,omitempty"`
	RequestID *string   `json:"request_id,omitempty"`
}

func (o *Error) GetCategory() *Category {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *Error) GetCode() *string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *Error) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *Error) GetDetails() *Details {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *Error) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

// ErrorResponse - Bad request
type ErrorResponse struct {
	Error_ *Error `json:"error,omitempty"`
}

var _ error = &ErrorResponse{}

func (e *ErrorResponse) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
