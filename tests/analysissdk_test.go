// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	analysisgo "github.com/const-cloudinary/analysis-go"
	"github.com/const-cloudinary/analysis-go/models/components"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"os"
	"testing"
)

func TestAnalysisSDK_AnalyzeAiVisionGeneral_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionGeneral(ctx, components.AnalyzeAIVisionGeneralRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
		Prompts: []string{
			"Describe this image in detail",
			"Does this image contain an insect?",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionGeneralResponse{
		Data: &components.Data{
			Analysis: &components.AIVisionGeneralAnalysisData{
				Responses: []components.Responses{
					components.Responses{
						Value: analysisgo.String("The image contains one cat."),
					},
					components.Responses{
						Value: analysisgo.String("The cat is on top of the table."),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionGeneralResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionGeneral_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionGeneral(ctx, components.AnalyzeAIVisionGeneralRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
		Prompts: []string{
			"Describe this image in detail",
			"Does this image contain an insect?",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionGeneralResponse{
		Data: &components.Data{
			Analysis: &components.AIVisionGeneralAnalysisData{
				Responses: []components.Responses{
					components.Responses{
						Value: analysisgo.String("The image contains one cat."),
					},
					components.Responses{
						Value: analysisgo.String("The cat is on top of the table."),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionGeneralResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionGeneral(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionGeneral(ctx, components.AnalyzeAIVisionGeneralRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
		Prompts: []string{
			"[\"Please describe this image in detail\",\"Does this image contain an animal?\"]",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionGeneralResponse{
		Data: &components.Data{
			Analysis: &components.AIVisionGeneralAnalysisData{
				Responses: []components.Responses{
					components.Responses{
						Value: analysisgo.String("The image contains one cat."),
					},
					components.Responses{
						Value: analysisgo.String("The cat is on top of the table."),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionGeneralResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionGeneral_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionGeneral(ctx, components.AnalyzeAIVisionGeneralRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
		Prompts: []string{
			"Describe this image in detail",
			"Does this image contain an insect?",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionGeneralResponse{
		Data: &components.Data{
			Analysis: &components.AIVisionGeneralAnalysisData{
				Responses: []components.Responses{
					components.Responses{
						Value: analysisgo.String("The image contains one cat."),
					},
					components.Responses{
						Value: analysisgo.String("The cat is on top of the table."),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionGeneralResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionModeration_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionModeration(ctx, components.AnalyzeAIVisionModerationRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
		RejectionQuestions: []string{
			"Does this image contain any violent activity?",
			"Is there any nudity in the image?",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionModerationResponse{
		Data: &components.AnalyzeAIVisionModerationResponseData{
			Analysis: &components.AIVisionModerationAnalysisData{
				Responses: []components.AIVisionModerationAnalysisDataResponses{
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Does the image contain any violent activity?"),
						Value:  components.ValueNo.ToPointer(),
					},
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Is there any nudity in the image?"),
						Value:  components.ValueYes.ToPointer(),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionModerationResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionModeration_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionModeration(ctx, components.AnalyzeAIVisionModerationRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
		RejectionQuestions: []string{
			"Does this image contain any violent activity?",
			"Is there any nudity in the image?",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionModerationResponse{
		Data: &components.AnalyzeAIVisionModerationResponseData{
			Analysis: &components.AIVisionModerationAnalysisData{
				Responses: []components.AIVisionModerationAnalysisDataResponses{
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Does the image contain any violent activity?"),
						Value:  components.ValueNo.ToPointer(),
					},
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Is there any nudity in the image?"),
						Value:  components.ValueYes.ToPointer(),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionModerationResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionModeration(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionModeration(ctx, components.AnalyzeAIVisionModerationRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
		RejectionQuestions: []string{
			"Does the image contain any violent activity?",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionModerationResponse{
		Data: &components.AnalyzeAIVisionModerationResponseData{
			Analysis: &components.AIVisionModerationAnalysisData{
				Responses: []components.AIVisionModerationAnalysisDataResponses{
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Does the image contain any violent activity?"),
						Value:  components.ValueNo.ToPointer(),
					},
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Is there any nudity in the image?"),
						Value:  components.ValueYes.ToPointer(),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionModerationResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionModeration_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionModeration(ctx, components.AnalyzeAIVisionModerationRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
		RejectionQuestions: []string{
			"Does this image contain any violent activity?",
			"Is there any nudity in the image?",
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionModerationResponse{
		Data: &components.AnalyzeAIVisionModerationResponseData{
			Analysis: &components.AIVisionModerationAnalysisData{
				Responses: []components.AIVisionModerationAnalysisDataResponses{
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Does the image contain any violent activity?"),
						Value:  components.ValueNo.ToPointer(),
					},
					components.AIVisionModerationAnalysisDataResponses{
						Prompt: analysisgo.String("Is there any nudity in the image?"),
						Value:  components.ValueYes.ToPointer(),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionModerationResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionTagging_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionTagging(ctx, components.AnalyzeAIVisionTaggingRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
		TagDefinitions: []components.TagDefinitions{
			components.TagDefinitions{
				Name:        "cigarettes",
				Description: "Does the image contain a pack of cigarettes?",
			},
			components.TagDefinitions{
				Name:        "furniture",
				Description: "Does the image contain any tables, chairs, couches or sofas?",
			},
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionTaggingResponse{
		Data: &components.AnalyzeAIVisionTaggingResponseData{
			Analysis: &components.AIVisionTaggingAnalysisData{
				Tags: []components.Tags{
					components.Tags{
						Name: analysisgo.String("cat"),
					},
					components.Tags{
						Name: analysisgo.String("table"),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionTaggingResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionTagging_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionTagging(ctx, components.AnalyzeAIVisionTaggingRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
		TagDefinitions: []components.TagDefinitions{
			components.TagDefinitions{
				Name:        "cigarettes",
				Description: "Does the image contain a pack of cigarettes?",
			},
			components.TagDefinitions{
				Name:        "furniture",
				Description: "Does the image contain any tables, chairs, couches or sofas?",
			},
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionTaggingResponse{
		Data: &components.AnalyzeAIVisionTaggingResponseData{
			Analysis: &components.AIVisionTaggingAnalysisData{
				Tags: []components.Tags{
					components.Tags{
						Name: analysisgo.String("cat"),
					},
					components.Tags{
						Name: analysisgo.String("table"),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionTaggingResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionTagging(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionTagging(ctx, components.AnalyzeAIVisionTaggingRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
		TagDefinitions: []components.TagDefinitions{
			components.TagDefinitions{
				Name:        "cigarettes",
				Description: "Does the image contain a pack of cigarettes?",
			},
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionTaggingResponse{
		Data: &components.AnalyzeAIVisionTaggingResponseData{
			Analysis: &components.AIVisionTaggingAnalysisData{
				Tags: []components.Tags{
					components.Tags{
						Name: analysisgo.String("cat"),
					},
					components.Tags{
						Name: analysisgo.String("table"),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionTaggingResponse)
}

func TestAnalysisSDK_AnalyzeAiVisionTagging_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeAiVisionTagging(ctx, components.AnalyzeAIVisionTaggingRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
		TagDefinitions: []components.TagDefinitions{
			components.TagDefinitions{
				Name:        "cigarettes",
				Description: "Does the image contain a pack of cigarettes?",
			},
			components.TagDefinitions{
				Name:        "furniture",
				Description: "Does the image contain any tables, chairs, couches or sofas?",
			},
		},
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeAIVisionTaggingResponse{
		Data: &components.AnalyzeAIVisionTaggingResponseData{
			Analysis: &components.AIVisionTaggingAnalysisData{
				Tags: []components.Tags{
					components.Tags{
						Name: analysisgo.String("cat"),
					},
					components.Tags{
						Name: analysisgo.String("table"),
					},
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeAIVisionTaggingResponse)
}

func TestAnalysisSDK_AnalyzeCaptioning_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCaptioning(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCaptioningResponse{
		Data: &components.AnalyzeCaptioningResponseData{
			Analysis: &components.CaptioningAnalysisData{
				Data: components.CaptioningAnalysisDataData{
					Caption: "A cat sitting on a table",
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCaptioningResponse)
}

func TestAnalysisSDK_AnalyzeCaptioning_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCaptioning(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCaptioningResponse{
		Data: &components.AnalyzeCaptioningResponseData{
			Analysis: &components.CaptioningAnalysisData{
				Data: components.CaptioningAnalysisDataData{
					Caption: "A cat sitting on a table",
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCaptioningResponse)
}

func TestAnalysisSDK_AnalyzeCaptioning(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCaptioning(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCaptioningResponse{
		Data: &components.AnalyzeCaptioningResponseData{
			Analysis: &components.CaptioningAnalysisData{
				Data: components.CaptioningAnalysisDataData{
					Caption: "A cat sitting on a table",
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCaptioningResponse)
}

func TestAnalysisSDK_AnalyzeCaptioning_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCaptioning(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCaptioningResponse{
		Data: &components.AnalyzeCaptioningResponseData{
			Analysis: &components.CaptioningAnalysisData{
				Data: components.CaptioningAnalysisDataData{
					Caption: "A cat sitting on a table",
				},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCaptioningResponse)
}

func TestAnalysisSDK_AnalyzeCldFashion_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldFashion(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldFashionResponse{
		Data: &components.AnalyzeCldFashionResponseData{
			Analysis: &components.CldFashionAnalysisData{
				Tags:         components.CldFashionAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldFashionResponse)
}

func TestAnalysisSDK_AnalyzeCldFashion_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldFashion(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldFashionResponse{
		Data: &components.AnalyzeCldFashionResponseData{
			Analysis: &components.CldFashionAnalysisData{
				Tags:         components.CldFashionAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldFashionResponse)
}

func TestAnalysisSDK_AnalyzeCldFashion(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldFashion(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldFashionResponse{
		Data: &components.AnalyzeCldFashionResponseData{
			Analysis: &components.CldFashionAnalysisData{
				Tags:         components.CldFashionAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldFashionResponse)
}

func TestAnalysisSDK_AnalyzeCldFashion_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldFashion(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldFashionResponse{
		Data: &components.AnalyzeCldFashionResponseData{
			Analysis: &components.CldFashionAnalysisData{
				Tags:         components.CldFashionAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldFashionResponse)
}

func TestAnalysisSDK_AnalyzeCldText_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldText(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldTextResponse{
		Data: &components.AnalyzeCldTextResponseData{
			Analysis: &components.CldTextAnalysisData{
				Tags:         components.CldTextAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldTextResponse)
}

func TestAnalysisSDK_AnalyzeCldText_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldText(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldTextResponse{
		Data: &components.AnalyzeCldTextResponseData{
			Analysis: &components.CldTextAnalysisData{
				Tags:         components.CldTextAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldTextResponse)
}

func TestAnalysisSDK_AnalyzeCldText(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldText(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldTextResponse{
		Data: &components.AnalyzeCldTextResponseData{
			Analysis: &components.CldTextAnalysisData{
				Tags:         components.CldTextAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldTextResponse)
}

func TestAnalysisSDK_AnalyzeCldText_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCldText(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCldTextResponse{
		Data: &components.AnalyzeCldTextResponseData{
			Analysis: &components.CldTextAnalysisData{
				Tags:         components.CldTextAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCldTextResponse)
}

func TestAnalysisSDK_AnalyzeCoco_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCoco(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCocoResponse{
		Data: &components.AnalyzeCocoResponseData{
			Analysis: &components.CocoAnalysisData{
				Tags:         components.CocoAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCocoResponse)
}

func TestAnalysisSDK_AnalyzeCoco_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCoco(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCocoResponse{
		Data: &components.AnalyzeCocoResponseData{
			Analysis: &components.CocoAnalysisData{
				Tags:         components.CocoAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCocoResponse)
}

func TestAnalysisSDK_AnalyzeCoco(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCoco(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCocoResponse{
		Data: &components.AnalyzeCocoResponseData{
			Analysis: &components.CocoAnalysisData{
				Tags:         components.CocoAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCocoResponse)
}

func TestAnalysisSDK_AnalyzeCoco_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeCoco(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeCocoResponse{
		Data: &components.AnalyzeCocoResponseData{
			Analysis: &components.CocoAnalysisData{
				Tags:         components.CocoAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeCocoResponse)
}

func TestAnalysisSDK_AnalyzeGoogleTagging_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeGoogleTagging(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeGoogleTaggingResponse{
		Data: &components.AnalyzeGoogleTaggingResponseData{
			Analysis: &components.GoogleTaggingAnalysisData{
				LabelAnnotations: components.LabelAnnotations{
					Labels: []components.Labels{
						components.Labels{
							Label: "cat",
							Score: 0.9,
						},
						components.Labels{
							Label: "table",
							Score: 0.8,
						},
					},
				},
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeGoogleTaggingResponse)
}

func TestAnalysisSDK_AnalyzeGoogleTagging_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeGoogleTagging(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeGoogleTaggingResponse{
		Data: &components.AnalyzeGoogleTaggingResponseData{
			Analysis: &components.GoogleTaggingAnalysisData{
				LabelAnnotations: components.LabelAnnotations{
					Labels: []components.Labels{
						components.Labels{
							Label: "cat",
							Score: 0.9,
						},
						components.Labels{
							Label: "table",
							Score: 0.8,
						},
					},
				},
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeGoogleTaggingResponse)
}

func TestAnalysisSDK_AnalyzeGoogleTagging(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeGoogleTagging(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeGoogleTaggingResponse{
		Data: &components.AnalyzeGoogleTaggingResponseData{
			Analysis: &components.GoogleTaggingAnalysisData{
				LabelAnnotations: components.LabelAnnotations{
					Labels: []components.Labels{
						components.Labels{
							Label: "cat",
							Score: 0.9,
						},
						components.Labels{
							Label: "table",
							Score: 0.8,
						},
					},
				},
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeGoogleTaggingResponse)
}

func TestAnalysisSDK_AnalyzeGoogleTagging_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeGoogleTagging(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeGoogleTaggingResponse{
		Data: &components.AnalyzeGoogleTaggingResponseData{
			Analysis: &components.GoogleTaggingAnalysisData{
				LabelAnnotations: components.LabelAnnotations{
					Labels: []components.Labels{
						components.Labels{
							Label: "cat",
							Score: 0.9,
						},
						components.Labels{
							Label: "table",
							Score: 0.8,
						},
					},
				},
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeGoogleTaggingResponse)
}

func TestAnalysisSDK_AnalyzeHumanAnatomy_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeHumanAnatomy(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeHumanAnatomyResponse{
		Data: &components.AnalyzeHumanAnatomyResponseData{
			Analysis: &components.HumanAnatomyAnalysisData{
				Tags:         components.HumanAnatomyAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeHumanAnatomyResponse)
}

func TestAnalysisSDK_AnalyzeHumanAnatomy_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeHumanAnatomy(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeHumanAnatomyResponse{
		Data: &components.AnalyzeHumanAnatomyResponseData{
			Analysis: &components.HumanAnatomyAnalysisData{
				Tags:         components.HumanAnatomyAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeHumanAnatomyResponse)
}

func TestAnalysisSDK_AnalyzeHumanAnatomy(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeHumanAnatomy(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeHumanAnatomyResponse{
		Data: &components.AnalyzeHumanAnatomyResponseData{
			Analysis: &components.HumanAnatomyAnalysisData{
				Tags:         components.HumanAnatomyAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeHumanAnatomyResponse)
}

func TestAnalysisSDK_AnalyzeHumanAnatomy_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeHumanAnatomy(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeHumanAnatomyResponse{
		Data: &components.AnalyzeHumanAnatomyResponseData{
			Analysis: &components.HumanAnatomyAnalysisData{
				Tags:         components.HumanAnatomyAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeHumanAnatomyResponse)
}

func TestAnalysisSDK_AnalyzeLvis_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeLvis(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeLvisResponse{
		Data: &components.AnalyzeLvisResponseData{
			Analysis: &components.LvisAnalysisData{
				Tags:         components.LvisAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeLvisResponse)
}

func TestAnalysisSDK_AnalyzeLvis_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeLvis(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeLvisResponse{
		Data: &components.AnalyzeLvisResponseData{
			Analysis: &components.LvisAnalysisData{
				Tags:         components.LvisAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeLvisResponse)
}

func TestAnalysisSDK_AnalyzeLvis(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeLvis(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeLvisResponse{
		Data: &components.AnalyzeLvisResponseData{
			Analysis: &components.LvisAnalysisData{
				Tags:         components.LvisAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeLvisResponse)
}

func TestAnalysisSDK_AnalyzeLvis_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeLvis(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeLvisResponse{
		Data: &components.AnalyzeLvisResponseData{
			Analysis: &components.LvisAnalysisData{
				Tags:         components.LvisAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeLvisResponse)
}

func TestAnalysisSDK_AnalyzeShopClassifier_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeShopClassifier(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeShopClassifierResponse{
		Data: &components.AnalyzeShopClassifierResponseData{
			Analysis: &components.ShopClassifierAnalysisData{
				Tags:         components.ShopClassifierAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeShopClassifierResponse)
}

func TestAnalysisSDK_AnalyzeShopClassifier_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeShopClassifier(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeShopClassifierResponse{
		Data: &components.AnalyzeShopClassifierResponseData{
			Analysis: &components.ShopClassifierAnalysisData{
				Tags:         components.ShopClassifierAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeShopClassifierResponse)
}

func TestAnalysisSDK_AnalyzeShopClassifier(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeShopClassifier(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeShopClassifierResponse{
		Data: &components.AnalyzeShopClassifierResponseData{
			Analysis: &components.ShopClassifierAnalysisData{
				Tags:         components.ShopClassifierAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeShopClassifierResponse)
}

func TestAnalysisSDK_AnalyzeShopClassifier_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeShopClassifier(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeShopClassifierResponse{
		Data: &components.AnalyzeShopClassifierResponseData{
			Analysis: &components.ShopClassifierAnalysisData{
				Tags:         components.ShopClassifierAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeShopClassifierResponse)
}

func TestAnalysisSDK_AnalyzeUnidet_URIExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeUnidet(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeUnidetResponse{
		Data: &components.AnalyzeUnidetResponseData{
			Analysis: &components.UnidetAnalysisData{
				Tags:         components.UnidetAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeUnidetResponse)
}

func TestAnalysisSDK_AnalyzeUnidet_AssetIDExample(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeUnidet(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeUnidetResponse{
		Data: &components.AnalyzeUnidetResponseData{
			Analysis: &components.UnidetAnalysisData{
				Tags:         components.UnidetAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeUnidetResponse)
}

func TestAnalysisSDK_AnalyzeUnidet(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeUnidet(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceAssetID(
			components.AssetID{
				AssetID: "e12345b5c456c8901bbb0efc00c0fcf",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeUnidetResponse{
		Data: &components.AnalyzeUnidetResponseData{
			Analysis: &components.UnidetAnalysisData{
				Tags:         components.UnidetAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeUnidetResponse)
}

func TestAnalysisSDK_AnalyzeUnidet_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeUnidet(ctx, components.BaseAnalyzeRequest{
		Source: components.CreateSourceURI(
			components.URI{
				URI: "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			},
		),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeUnidetResponse{
		Data: &components.AnalyzeUnidetResponseData{
			Analysis: &components.UnidetAnalysisData{
				Tags:         components.UnidetAnalysisDataTags{},
				ModelVersion: analysisgo.Int64(1),
			},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: analysisgo.String("17c3b70c5096df0e77e838323abb7029"),
	}, res.AnalyzeUnidetResponse)
}

func TestAnalysisSDK_AnalyzeURI(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeURI(ctx, components.AnalyzeURIRequest{
		URI: analysisgo.String("https://res.cloudinary.com/demo/image/upload/sample.jpg"),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeResponse{
		Data: components.AnalysisPayload{
			Entity:   "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			Analysis: components.Analysis{},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: "17c3b70c5096df0e77e838323abb7029",
	}, res.AnalyzeResponse)
}

func TestAnalysisSDK_AnalyzeURI_(t *testing.T) {
	s := analysisgo.New(
		analysisgo.WithSecurity(components.Security{
			BasicAuth: &components.SchemeBasicAuth{
				Username: os.Getenv(""),
				Password: os.Getenv(""),
			},
		}),
	)

	ctx := context.Background()
	res, err := s.Analysis.AnalyzeURI(ctx, components.AnalyzeURIRequest{
		URI: analysisgo.String("https://res.cloudinary.com/demo/image/upload/sample.jpg"),
	}, analysisgo.String("your-cloud-name"))
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, &components.AnalyzeResponse{
		Data: components.AnalysisPayload{
			Entity:   "https://res.cloudinary.com/demo/image/upload/sample.jpg",
			Analysis: components.Analysis{},
		},
		Limits: &components.Limits{
			Usage: &components.Usage{
				Type:  components.FeatureAiVision.ToPointer(),
				Count: analysisgo.Int64(123),
			},
		},
		RequestID: "17c3b70c5096df0e77e838323abb7029",
	}, res.AnalyzeResponse)
}
